#!/usr/bin/bash

#############################################
# Project : Theme-Engine                    #
# Author  : ABHacker Official               #
# Version : 4.6 (Latest)                    #
# Github  : abhackerofficial                #
#############################################

#..............................................................

                       THEME='default'

#..............................................................

## Colors # Day
# foreground
Fgreen=$'\e[0;1;38;2;0;230;118m'   Fblue=$'\e[0;1;38;2;40;90;255m'   Fsky=$'\e[0;1;38;2;0;255;255m'    Fpurple=$'\e[0;1;38;2;101;31;255m' Fyellow=$'\e[0;1;38;2;200;255;0m' Fred=$'\e[0;1;38;2;200;0;0m' Bcyan=$'\e[0;1;38;5;49m'
# background
Bgreen=$'\e[0;1;48;2;0;230;118m'   Bblue=$'\e[0;1;48;2;40;90;255m'   Bsky=$'\e[0;1;30;48;2;0;255;255m' Bpurple=$'\e[0;1;48;2;101;31;255m' Byellow=$'\e[0;1;30;48;2;200;255;0m' Bred=$'\e[0;1;48;2;200;0;0m' Bcyan=$'\e[0;1;30;48;5;46m'
reset=$'\e[0m'

## Colors # Night
# foreground
NFgreen=$'\e[0;1;38;2;0;230;118m'   NFblue=$'\e[0;1;38;2;40;90;255m'   NFsky=$'\e[0;1;38;2;0;255;255m'    NFpurple=$'\e[0;1;38;2;101;31;255m' NFyellow=$'\e[0;1;38;2;200;255;0m' NFred=$'\e[0;1;38;2;200;0;0m' NBcyan=$'\e[0;1;38;5;49m'
# background
NBgreen=$'\e[0;1;90;7;48;2;0;230;118m'   NBblue=$'\e[0;1;90;7;48;2;0;150;255m'   NBsky=$'\e[0;1;90;7;30;48;2;0;255;255m' NBpurple=$'\e[0;1;90;7;48;2;200;50;255m' NByellow=$'\e[0;1;90;7;30;48;2;200;255;0m' NBred=$'\e[0;1;90;7;48;2;255;0;0m' NBcyan=$'\e[0;1;;90;7;30;48;5;46m'

## Theme-Engine Version
version=" 4.6"

## Auto Updater
status='true'

## Shell
Shell=$(ps | grep -o "zsh" | head -n1)

## Specify time
day=`date +%H`
night=`date +%H`

## distro
distroA=$(uname -o | grep -o "Android")
distroB=$(uname -o | grep -o "Linux")

## directory
directories() {
loc1="$PREFIX/share/Theme-Engine/colors"
loc2="$PREFIX/share/Theme-Engine/fonts"
loc3="$PREFIX/share/Theme-Engine/programs"
loc4="$PREFIX/share/Theme-Engine/fonts/Terminus.ttf"
loc5="$PREFIX/share/Theme-Engine/fonts/fonts.rar"
loc6="$HOME/.termux/termux.properties"
loc7="$HOME/.termux"
loc8="$HOME/.termux/config.theme-engine"
loc9="$PREFIX/share/Theme-Engine"
loc10="$PREFIX/share/Theme-Engine/theme-engine"
locM=$(which theme-engine)
}

if [[ $distroA == *'Android'* ]];then
directories

elif [[ $distroB == *'Linux'* ]] || [[ $distroB == *'Linux'* ]];then
directories
else echo "Theme-Engine isn't supported you're system."
fi

#..............................................................

banner0() {
clear
echo "

	┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
	┃  ${Fred}╺┳╸╻ ╻┏━╸┏┳┓┏━╸   ${Fblue}┏━╸┏┓╻┏━╸╻┏┓╻┏━╸  ${reset}┃
	┃  ${Fred} ┃ ┣━┫┣╸ ┃┃┃┣╸ ${reset}╺━╸${Fblue}┣╸ ┃┗┫┃╺┓┃┃┗┫┣╸   ${reset}┃
	┃  ${Fred} ╹ ╹ ╹┗━╸╹ ╹┗━╸   ${Fblue}┗━╸╹ ╹┗━┛╹╹ ╹┗━╸  ${reset}┃
	┃──────────>>[version${version}]<<───────────┃
	┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛
"
}

setup() {
	banner0
	printf " Setting-up Theme-Engine...\n\n"
	printf " Coping files in /data/data/com.termux/files/usr/share directory...\n\n"
	cd ..
	cp -rf Theme-Engine $PREFIX/share &> /dev/null
	cd - &> /dev/null
        cp theme-engine $PREFIX/bin &> /dev/null
if [[ -d "${loc9}" && -f "$PREFIX/bin/theme-engine" ]];then
	printf " Successfully Setup Theme-Engine.\n\n"
	printf " You can run this program by typing \e[92mtheme-engine${reset}\n\n"
	printf " Get Help: \e[92mtheme-engine${reset} --help\n\n"
	printf " Git Page: https://github.com/abhackerofficial/Theme-Engine\n"
	exit
else
	echo -e " ${reset}Required files was deleted !\n"
	echo -e " ${Fred}Setup failed theme-engine trying to Re-Install...${reset}" ;sleep 0.5 ;cd $HOME
	bash -c " $(curl -fsSL https://github.com/abhackerofficial/Theme-Engine/raw/master/programs/update.theme)"
fi
}

remove() {
if [[ -d "${loc9}" ]] | [[ -f "$PREFIX/bin/theme-engine" ]];then
	banner0
	printf " Uninstalling Theme-Engine...\n\n"
	printf " Remove files in /data/data/com.termux/files/usr/share directory...\n\n"
	rm -rf ${loc9}
	rm $PREFIX/bin/theme-engine
	printf " Successfully Removed Theme-Engine.\n\n"
	printf " Git Page: https://github.com/abhackerofficial/Theme-Engine\n"
	exit
fi
}

#..............................................................

checking() {
if [[ -d "${loc9}" && -f "$PREFIX/bin/theme-engine" ]];then
pwd &> /dev/null
else setup
fi
}

#..............................................................
                           checking
#..............................................................

## arguments

if [[ "${1}" = "-h" ]] || [[ "${1}" = "--help" ]]; then
echo -e "Usage: theme-engine [options...]

available themes:
 --theme -default  : \e[1;90m━━\e[0;1m━━${reset}
 --theme -night    : \e[1;90m━━━━\e[0m${reset}
 --theme -light    : \e[0;1m━━━━\e[0m${reset}

available commands:
 -c  : Start color menu with this command.
 -f  : Start font menu with this command.
 -u  : Check available update with this command.
 -L  : Check changelog with this command.

 --updater -off :  Trun off auto-updater with this command.
 --updater -on  :  Turn on auto-updater with this command.
 --uninstall    :  This command to uninstall Theme-Engine."
exit

elif [ "${1}" = "-u" ]; then
	cd ${loc3}
	bash update.theme --check
	exit

elif [ "${1}" = "-c" ]; then
	cd ${loc3}
	bash colors.theme
	exit

elif [ "${1}" = "-f" ]; then
	cd ${loc3}
	bash fonts.theme
	exit

elif [ "${1}" = "-L" ]; then
	echo -e "${Fgreen}"
	cat ${loc9}/CHANGELOG.md
	echo -e "${reset}"
	exit

elif [ "${1}" = "--install" ]; then
	setup

elif [ "${1}" = "--uninstall" ]; then
	remove

elif [ "${1}" = "--theme" ]; then
if [ ${#2} -lt 1 ]; then
	echo -e "theme-engine: try 'theme-engine --help' or 'theme-engine -h'\nfor more information"
	exit
	fi

if [[ "${2}" = "-default" ]] || [[ "${2}" = "-DEFAULT" ]]; then
	sed -i "1,20 s/THEME='night'/THEME='default'/g" ${locM}
	sed -i "1,20 s/THEME='light'/THEME='default'/g" ${locM}
	printf "enabled theme: default\n"
	exit

elif [[ "${2}" = "-night" ]] || [[ "${2}" = "-NIGHT" ]]; then
	sed -i "1,20 s/THEME='default'/THEME='night'/g" ${locM}
        sed -i "1,20 s/THEME='light'/THEME='night'/g" ${locM}
        printf "enabled theme: night\n"
	exit

elif [[ "${2}" = "-light" ]] || [[ "${2}" = "-LIGHT" ]]; then
	sed -i "1,20 s/THEME='night'/THEME='light'/g" ${locM}
	sed -i "1,20 s/THEME='default'/THEME='light'/g" ${locM}
        printf "enabled theme: light\n"
        exit
fi

elif [ "${1}" = "--updater" ]; then
	if [ ${#2} -lt 1 ]; then
	echo -e "theme-engine: try 'theme-engine --help' or 'theme-engine -h'\nfor more information"
	exit
	fi

if [[ "${2}" = "-off" ]] || [[ "${2}" = "-OFF" ]]; then
	sed -i "20,40 s/status='true'/status='false'/g" ${locM}
	printf "updater: off\n"
exit
elif [[ "${2}" = "-on" ]] || [[ "${2}" = "-ON" ]]; then
	sed -i "20,40 s/status='false'/status='true'/g" ${locM}
	printf "updater: on\n"
exit
fi
fi

#..............................................................

## Required Packeges Checking...
   command -v wget > /dev/null 2>&1 || { echo >&2 "I require wget but it's not installed, Now Installing."; apt install wget -y; connection="$(ping -c 1 -q www.google.com >&/dev/null; echo $?)"
	if [[ "$connection" != 0 ]]
   then clear
   echo -e "${red}[${green}-${red}] No Internet${green} connection!"
   exit
fi; }

   command -v unrar > /dev/null 2>&1 || { echo >&2 "I require unrar but it's not installed, Now Installing."; apt install unrar -y; connection="$(ping -c 1 -q www.google.com >&/dev/null; echo $?)"
	if [[ "$connection" != 0 ]]
   then clear
   echo -e "\033[1;91m[\033[1;92m-\033[1;91m] No Internet\033[1;92m connection!"
   exit
 fi
}

   command -v zsh > /dev/null 2>&1 || { echo >&2 "I require zsh but it's not installed, Now Installing."; apt install zsh -y; connection="$(ping -c 1 -q www.google.com >&/dev/null; echo $?)"
	if [[ "$connection" != 0 ]]
   then clear
   echo -e "\033[1;91m[\033[1;92m-\033[1;91m] No Internet\033[1;92m connection!"
   exit
 fi
}

#..............................................................

PUT(){ echo -en "\033[${1};${2}H";}
HIDE(){ echo -en "\033[?25l";}
NORM(){ echo -en "\033[?12l\033[?25h";}
WAIT() { sleep 0.03 ;}

line1() { printf "\e[0;1m┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓\r" ;}
line2() { printf "\e[0;1m┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛\r" ;}
line3() { echo -e "\e[0;1m┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓" ;}
line4() { echo -e "\e[0;1m┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛" ;}

#..............................................................

# interrupter
exit_on_signal_SIGINT () {
    echo -e "\n"
    echo -ne "\033]12;#b4e1fd\007"
    NORM
    exit 0
}

exit_on_signal_SIGTERM () {
   echo -e "\n"
   echo -ne "\033]12;#b4e1fd\007"
   NORM
   exit 0
}

trap exit_on_signal_SIGINT SIGINT ; trap exit_on_signal_SIGTERM SIGTERM

#..............................................................

if [ -f "${loc5}" ];then
  if [ -f "${loc4}" ];then
     rm ${loc9}/fonts/fonts.rar ;fi ;fi

#..............................................................

## Theme-Engine auto-update

night_updater() {
if [[ $status == 'true' ]] || [[ $status == 'TRUE' ]];then
cd ${loc9}
HIDE
	printf "\e[0;1m┃\e[0;1;100m    Checking for Update...                          \e[0;1m┃${reset}\r"
      PUT 15 1
   line2
changed=0
	git remote update &> /dev/null && git status -uno | grep -q 'Your branch is behind' && changed=1
	if [ $changed = 1 ]; then
  PUT 14 1
	printf "\e[0;1m┃\e[0;1;100m   ✚ Theme-Engine Update Available                   \r\e[0;1m┃${reset}"
      sleep 1.6
    PUT 15 1
  line2
PUT 14 1
	printf "\e[0;1m┃\e[0;1;100m   ✚ Theme-Engine Updating...                        \r\e[0;1m┃${reset}"
       PUT 15 1
     line2
    git stash &> /dev/null
  git pull &> /dev/null
 cp ${loc9}/theme-engine $PREFIX/bin
PUT 14 1

	printf "\e[0;1m┃\e[0;1;100m   ✔ Theme-Engine is Updated to latest version.      \r\e[0;1m┃${reset}"
      sleep 1.6
    PUT 15 1
  line2
PUT 14 1

	printf "\e[0;1m┃\e[0;1;100m   ➜ Get Changelog : theme-engine -L                 \r\e[0;1m┃${reset}"
      sleep 1.6
    PUT 15 1
   line2
 PUT 14 1
bash theme-engine
exit
else
      PUT 15 1
    line2
  PUT 14 1
NORM
fi
fi
}

day_updater() {
if [[ $status == 'true' ]] || [[ $status == 'TRUE' ]];then
cd ${loc9}
HIDE
	printf "\e[0;1m┃\e[0;1;7m    Checking for Update...                          \e[0;1m┃${reset}\r"
      PUT 15 1
   line2
changed=0
	git remote update &> /dev/null && git status -uno | grep -q 'Your branch is behind' && changed=1
	if [ $changed = 1 ]; then
  PUT 14 1
	printf "\e[0;1m┃\e[0;1;7m   ✚ Theme-Engine Update Available                   \r\e[0;1m┃${reset}"
      sleep 1.6
    PUT 15 1
  line2
PUT 14 1
	printf "\e[0;1m┃\e[0;1;7m   ✚ Theme-Engine Updating...                        \r\e[0;1m┃${reset}"
       PUT 15 1
     line2
    git stash &> /dev/null
  git pull &> /dev/null
 cp ${loc9}/theme-engine $PREFIX/bin
PUT 14 1

	printf "\e[0;1m┃\e[0;1;7m   ✔ Theme-Engine is Updated to latest version.      \r\e[0;1m┃${reset}"
      sleep 1.6
    PUT 15 1
  line2
PUT 14 1

	printf "\e[0;1m┃\e[0;1;7m   ➜ Get Changelog : theme-engine -L                 \r\e[0;1m┃${reset}"
      sleep 1.6
    PUT 15 1
   line2
 PUT 14 1
bash theme-engine
exit
else
      PUT 15 1
    line2
  PUT 14 1
NORM
fi
fi
}

#..............................................................

## Theme-Engine Main Options

night_options() {
   echo -e "\e[0;1m┃${NBred} ┌[1]┐ Apply Color Scheme ${NByellow} ┌[4]┐ Disable Zsh-Theme   \e[0;1m┃${reset}"

if [ -f "${loc7}/termux.properties" ];then
   echo -e "\e[0;1m┃${NBblue} │ 2 │ Apply Font Style   ${NBcyan} │ 5 │ Reset Extra Keys ⌥  \e[0;1m┃"
else
   echo -e "\e[0;1m┃${NBblue} │ 2 │ Apply Font Style   ${NBcyan} │ 5 │ Enable Extra Keys ⌥ \e[0;1m┃"
fi

if [ ! -f "${loc8}" ];then
   echo -e "\e[0;1m┃${NBpurple} └[3]┘ Enable Zsh-Theme   ${NBsky} └[6]┘ About Theme-Engine  \e[0;1m┃${reset}"
else
   echo -e "\e[0;1m┃${NBpurple} └[3]┘ Apply Zsh-Theme    ${NBsky} └[6]┘ About Theme-Engine  \e[0;1m┃${reset}"
fi
}

day_options() {
echo -e "\e[0;1m┃${Bred} ┌[1]┐ Apply Color Scheme ${Byellow} ┌[4]┐ Disable Zsh-Theme   \e[0;1m┃${reset}"

if [ -f "${loc7}/termux.properties" ];then
   echo -e "\e[0;1m┃${Bblue} │ 2 │ Apply Font Style   ${Bcyan} │ 5 │ Reset Extra Keys ⌥  \e[0;1m┃"
else
   echo -e "\e[0;1m┃${Bblue} │ 2 │ Apply Font Style   ${Bcyan} │ 5 │ Enable Extra Keys ⌥ \e[0;1m┃"
fi

if [ ! -f "${loc8}" ];then
   echo -e "\e[0;1m┃${Bpurple} └[3]┘ Enable Zsh-Theme   ${Bsky} └[6]┘ About Theme-Engine  \e[0;1m┃${reset}"
else
   echo -e "\e[0;1m┃${Bpurple} └[3]┘ Apply Zsh-Theme    ${Bsky} └[6]┘ About Theme-Engine  \e[0;1m┃${reset}"
fi
}

#..............................................................

night_extra_keys() {
if [ ! -f "${loc6}" ];then
   cd ${loc3}
   cp extra.keys.theme ${loc6}
termux-reload-settings
PUT 16 1
   echo -e "${NBcyan}           Extra Keys Enabled Successfully             ${reset}"
   echo -ne "\033]12;#b4e1fd\007"
else
   cd ${loc7}
   rm termux.properties
termux-reload-settings
PUT 16 1
   echo -e "${NBcyan}           Extra Keys Reset Successfully               ${reset}"
   echo -ne "\033]12;#b4e1fd\007"
fi
}

day_extra_keys() {
if [ ! -f "${loc6}" ];then
   cd ${loc3}
   cp extra.keys.theme ${loc6}
termux-reload-settings
PUT 16 1
   echo -e "${Bcyan}           Extra Keys Enabled Successfully             ${reset}"
   echo -ne "\033]12;#b4e1fd\007"
else
   cd ${loc7}
   rm termux.properties
termux-reload-settings
PUT 16 1
   echo -e "${Bcyan}           Extra Keys Reset Successfully               ${reset}"
   echo -ne "\033]12;#b4e1fd\007"
fi
}

#..............................................................

## Theme-Engine Main Banner

night_banner() {
printf "${reset}"
echo -ne "\033]12;#363636\007";clear
printf "\n\e[0;1;7m`line3`${reset}";WAIT
printf "\n\e[0;1m┃\e[0;1;100m ${NBred}                       ${NBred}  ${NBblue}                           \e[0;1m┃${reset}";WAIT
printf "\n\e[0;1m┃\e[0;1;100m ${NBred} ▀█▀ █ █ █▀▀ █▀▄▀█ █▀▀ \e[0;100m▃▃${NBblue}  █▀▀ █▄ █ █▀▀ █ █▄ █ █▀▀  \e[0;1m┃${reset}";WAIT
printf "\n\e[0;1m┃\e[0;1;100m ${NBred}  █  █▀█ ██▄ █ ▀ █ ██▄ ${NBred}  ${NBblue}  ██▄ █ ▀█ █▄█ █ █ ▀█ ██▄  \e[0;1m┃${reset}";WAIT
printf "\n\e[0;1m┃\e[0;1;100m ${NBred}                       ${NBred}  ${NBblue}                           \e[0;1m┃${reset}";WAIT
printf "\n\e[0;1m┃\e[0;1;100m Maintain by - abhackerofficial ──────┐              \e[0;1m┃${reset}";WAIT
if [[ $Shell == *'zsh'* ]]; then
printf "\n\e[0;1m┃\e[1;100m Current shell : zsh                  └────── -v${version} \e[0;1m┃${reset}"; WAIT
printf "\n\e[0;1;7m`line4`${reset}\n";WAIT
else
printf "\n\e[0;1m┃\e[1;100m Current shell : bash                 └────── -v${version}  \e[0;1m┃\e[0;1m┃${reset}"; WAIT
printf "\n\e[0;1;7m`line4`${reset}\n";WAIT
fi
}

day_banner() {
printf "${reset}"
echo -ne "\033]12;#363636\007";clear
printf "\n\e[0;1;7m`line3`${reset}";WAIT
printf "\n\e[0;1m┃\e[0;1;7m${Bred}                        ${Bred}  ${Bblue}                           \e[0;1m┃${reset}";WAIT
printf "\n\e[0;1m┃\e[0;1;7m${Bred}  ▀█▀ █ █ █▀▀ █▀▄▀█ █▀▀ ${Bred}▃▃${Bblue}  █▀▀ █▄ █ █▀▀ █ █▄ █ █▀▀  \e[0;1m┃${reset}";WAIT
printf "\n\e[0;1m┃\e[0;1;7m${Bred}   █  █▀█ ██▄ █ ▀ █ ██▄ ${Bred}  ${Bblue}  ██▄ █ ▀█ █▄█ █ █ ▀█ ██▄  \e[0;1m┃${reset}";WAIT
printf "\n\e[0;1m┃\e[0;1;7m${Bred}                        ${Bred}  ${Bblue}                           \e[0;1m┃${reset}";WAIT
printf "\n\e[0;1m┃\e[0;1;7m Maintain by - abhackerofficial ──────┐              \e[0;1m┃${reset}";WAIT
if [[ $Shell == *'zsh'* ]]; then
printf "\n\e[0;1m┃\e[1;7m Current shell : zsh                  └────── -v${version} \e[0;1m┃${reset}"; WAIT
printf "\n\e[0;1;7m`line4`${reset}\n";WAIT
else
printf "\n\e[0;1m┃\e[1;7m Current shell : bash                 └────── -v${version} \e[0;1m┃${reset}"; WAIT
printf "\n\e[0;1;7m`line4`${reset}\n";WAIT
fi
}

#..............................................................
#..............................................................

night() {
if [ -f "${loc5}" ];then
  if [ -f "${loc8}" ];then
          night_banner
        line3
      night_options
    PUT 15 1
 line4
bash ${loc3}/unrar.theme
   fi
fi

if [ -f "${loc8}" ];then
     night_banner
    line3
  night_options
night_updater

#..............................................................

echo -ne "\033]12;#b4e1fd\007"
printf "\e[0;1m┃\e[0;1;100m  [Execute an Option]>                               \e[0;1m┃${reset}"
	PUT 15 1
      line4
     PUT 14 25
    printf "\e[0;1;100m"
  read option
echo -ne "${reset}"

#..............................................................

if [[ $option = "1" ]] || [[ $option = "01" ]];then
	echo
	cd ${loc3}
	bash colors.theme

elif [[ $option = "2" ]] || [[ $option = "02" ]];then
	echo
	cd ${loc3}
	bash fonts.theme

elif [[ $option = "3" ]] || [[ $option = "03" ]];then
	echo -ne "\033]12;#b4e1fd\007"
	cd ${loc3}
	bash zsh.theme

elif [[ $option = "4" ]] || [[ $option = "04" ]];then
	echo -ne "\033]12;#b4e1fd\007"
        cd ${loc3}
        bash disable.zsh.theme
	exit

elif [[ $option = "5" ]] || [[ $option = "05" ]];then
	night_extra_keys

elif [[ $option = "6" ]] || [[ $option = "06" ]];then
	cd ${loc3}
	bash about.theme

else PUT 16 1
       echo -e "\e[1;100m               You entered Wrong Input !               ${reset}";echo;echo -ne "\033]12;#b4e1fd\007"
   fi
fi

#..............................................................

if [ -f "${loc5}" ];then
 if [ ! -f "${loc8}" ];then
      night_banner
    line3
   night_options
  PUT 15 1
 line4
bash ${loc3}/unrar.theme
   fi
fi

if [ ! -f "${loc8}" ];then
    night_banner
   line3
  night_options
night_updater

#..............................................................

echo -ne "\033]12;#b4e1fd\007"
printf "\e[0;1m┃\e[0;1;100m  [Execute an Option]>                               \e[0;1m┃${reset}"
	PUT 15 1
      line4
     PUT 14 25
    printf "\e[0;1;100m"
  read option
echo -ne "${reset}"

#..............................................................

if [[ $option = "1" ]] || [[ $option = "01" ]];then
	echo
	cd ${loc3}
	bash colors.theme

elif [[ $option = "2" ]] || [[ $option = "02" ]];then
	echo
	cd ${loc3}
	bash fonts.theme

elif [[ $option = "3" ]] || [[ $option = "03" ]];then
	echo -ne "\033]12;#b4e1fd\007"
	cd ${loc3}
	bash zsh.setup.theme

elif [[ $option = "4" ]] || [[ $option = "04" ]];then
	echo -ne "\033]12;#b4e1fd\007"
        cd ${loc3}
        bash disable.zsh.theme
        exit

elif [[ $option = "5" ]] || [[ $option = "05" ]];then
	night_extra_keys

elif [[ $option = "6" ]] || [[ $option = "06" ]];then
	cd ${loc3}
	bash about.theme

else PUT 16 1
       echo -e "\e[0;1;100m               You entered Wrong Input !               ${reset}";echo;echo -ne "\033]12;#b4e1fd\007"
   fi
fi
}

#..............................................................
#..............................................................

light() {
if [ -f "${loc5}" ];then
  if [ -f "${loc8}" ];then
          day_banner
        line3
      day_options
    PUT 15 1
 line4
bash ${loc3}/unrar.theme
   fi
fi

if [ -f "${loc8}" ];then
     day_banner
    line3
  day_options
day_updater

#..............................................................

printf "\e[0;1m┃\e[0;1;7m  [Execute an Option]>                               \e[0;1m┃${reset}"
	PUT 15 1
      line4
     PUT 14 25
    printf "\e[0;1;7m"
  read option
echo -ne "${reset}"

#..............................................................

if [[ $option = "1" ]] || [[ $option = "01" ]];then
	echo
	cd ${loc3}
	bash colors.theme

elif [[ $option = "2" ]] || [[ $option = "02" ]];then
	echo
	cd ${loc3}
	bash fonts.theme

elif [[ $option = "3" ]] || [[ $option = "03" ]];then
	echo -ne "\033]12;#b4e1fd\007"
	cd ${loc3}
	bash zsh.theme

elif [[ $option = "4" ]] || [[ $option = "04" ]];then
	echo -ne "\033]12;#b4e1fd\007"
        cd ${loc3}
        bash disable.zsh.theme
	exit

elif [[ $option = "5" ]] || [[ $option = "05" ]];then
	day_extra_keys

elif [[ $option = "6" ]] || [[ $option = "06" ]];then
	cd ${loc3}
	bash about.theme

else PUT 16 1
       echo -e "\e[1;100m               You entered Wrong Input !               ${reset}";echo;echo -ne "\033]12;#b4e1fd\007"
   fi
fi

#..............................................................

if [ -f "${loc5}" ];then
 if [ ! -f "${loc8}" ];then
      day_banner
    line3
   day_options
  PUT 15 1
 line4
bash ${loc3}/unrar.theme
   fi
fi

if [ ! -f "${loc8}" ];then
    day_banner
   line3
  day_options
day_updater

#..............................................................

printf "\e[0;1m┃\e[0;1;7m  [Execute an Option]>                               \e[0;1m┃${reset}"
         PUT 15 1
       line4
      PUT 14 25
    printf "\e[0;1;7m"
  read option
echo -ne "${reset}"

#..............................................................

if [[ $option = "1" ]] || [[ $option = "01" ]];then
	echo
	cd ${loc3}
	bash colors.theme

elif [[ $option = "2" ]] || [[ $option = "02" ]];then
	echo
	cd ${loc3}
	bash fonts.theme

elif [[ $option = "3" ]] || [[ $option = "03" ]];then
	echo -ne "\033]12;#b4e1fd\007"
	cd ${loc3}
	bash zsh.setup.theme

elif [[ $option = "4" ]] || [[ $option = "04" ]];then
	echo -ne "\033]12;#b4e1fd\007"
        cd ${loc3}
        bash disable.zsh.theme
        exit

elif [[ $option = "5" ]] || [[ $option = "05" ]];then
	day_extra_keys

elif [[ $option = "6" ]] || [[ $option = "06" ]];then
	cd ${loc3}
	bash about.theme

else PUT 16 1
       echo -e "\e[0;1;100m               You entered Wrong Input !               ${reset}";echo;echo -ne "\033]12;#b4e1fd\007"
   fi
fi
}

#..............................................................
#..............................................................

## Auto Theme

default() {
if [[ $night -gt "17" ]] || [[ $night -lt "06" ]];then
night
else
light
fi
}

#..............................................................

                          "$THEME"

#..............................................................

#       Thanks for using Theme-Engine.
