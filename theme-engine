#!/data/data/com.termux/files/usr/bin/bash

#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
#┃ Project : Theme-Engine                                    ┃
#┃ Author  : ABHacker Official                               ┃
#┃ Version : 5.6 (Latest)                                    ┃
#┃ Github  : abhackerofficial <github.com/abhackerofficial>  ┃
#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛

#..............................................................

                       THEME='default'

#..............................................................

## Colors # Day
# foreground
Fgreen=$'\e[0;1;38;2;0;230;118m'   Fblue=$'\e[0;1;38;2;40;90;255m'   Fsky=$'\e[0;1;38;2;0;255;255m'    Fpurple=$'\e[0;1;38;2;101;31;255m' Fyellow=$'\e[0;1;38;2;200;255;0m' Fred=$'\e[0;1;38;2;200;0;0m' Bcyan=$'\e[0;1;38;5;49m'
Sblue=$'\e[1;38;2;100;180;255m'    Sred=$'\e[1;38;2;255;180;180m'
# background
Bgreen=$'\e[0;1;48;2;0;230;118m'   Bblue=$'\e[0;1;48;2;0;80;255m'   Bsky=$'\e[0;1;30;48;2;0;255;255m' Bpurple=$'\e[0;1;48;2;101;31;255m' Byellow=$'\e[0;1;30;48;2;200;255;0m' Bred=$'\e[0;1;48;2;250;0;0m' Bcyan=$'\e[0;1;30;48;5;46m'
Sreset=$'\e[38;2;240;240;240m'     reset=$'\e[0m'

## Colors # Night
# foreground
NFgreen=$'\e[0;1;38;2;0;230;118m'      NFblue=$'\e[0;1;38;2;40;90;255m'   NFsky=$'\e[0;1;38;2;0;255;255m'    NFpurple=$'\e[0;1;38;2;101;31;255m' NFyellow=$'\e[0;1;38;2;200;255;0m' NFred=$'\e[0;1;38;2;200;0;0m' NBcyan=$'\e[0;1;38;5;49m'
# background
NBgreen=$'\e[0;1;90;7;48;2;0;230;118m' NBblue=$'\e[0;1;90;7;48;2;50;170;255m'   NBsky=$'\e[0;1;90;7;30;48;2;0;255;255m' NBpurple=$'\e[0;1;90;7;48;2;200;100;255m' NByellow=$'\e[0;1;90;7;30;48;2;200;255;0m' NBred=$'\e[0;1;90;7;48;2;255;0;0m' NBcyan=$'\e[0;1;;90;7;30;48;5;46m'

## Theme-Engine Version
version="5.6"

## Auto Updater
status='true'

## Specify time
day=`date +%H`
night=`date +%H`

## Arrow
arrow="└─────►"

# identify shell
shell=$(printf "$SHELL")

## distro
distro=$(uname -o | grep -o "Android")

# Check version
android=$(getprop ro.build.version.release)

# shells list
sh1="bash"
sh2="ksh"
sh3="dash"
sh4="zsh"
sh5="tcsh"
sh6="fish"

#..............................................................

night_print_shell() {
if [[ ${shell} == *'bash'* ]];then
printf "\n\e[0;1m┃\e[1;100m Logged shell — ${sh1}                  ${arrow} -v ${version} \e[0;1m┃${reset}"; WAIT

elif [[ ${shell} == *'ksh'* ]];then
printf "\n\e[0;1m┃\e[1;100m Logged shell — ${sh2}                   ${arrow} -v ${version} \e[0;1m┃${reset}"; WAIT

elif [[ ${shell} == *'dash'* ]];then
printf "\n\e[0;1m┃\e[1;100m Logged shell — ${sh3}                  ${arrow} -v ${version} \e[0;1m┃${reset}"; WAIT

elif [[ ${shell} == *'zsh'* ]];then
printf "\n\e[0;1m┃\e[1;100m Logged shell — ${sh4}                   ${arrow} -v ${version} \e[0;1m┃${reset}"; WAIT

elif [[ ${shell} == *'tcsh'* ]];then
printf "\n\e[0;1m┃\e[1;100m Logged shell — ${sh5}                  ${arrow} -v ${version} \e[0;1m┃${reset}"; WAIT

elif [[ ${shell} == *'fish'* ]];then
printf "\n\e[0;1m┃\e[1;100m Logged shell — ${sh6}                  ${arrow} -v ${version} \e[0;1m┃${reset}"; WAIT

else
printf "\n\e[0;1m┃\e[1;100m Logged shell — unknown               ${arrow} -v ${version} \e[0;1m┃${reset}"; WAIT
fi
}

day_print_shell() {
if [[ ${shell} == *'bash'* ]];then
printf "\n\e[0;1m┃\e[1;7m Logged shell — ${sh1}                  ${arrow} -v ${version} \e[0;1m┃${reset}"; WAIT

elif [[ ${shell} == *'ksh'* ]];then
printf "\n\e[0;1m┃\e[1;7m Logged shell — ${sh2}                   ${arrow} -v ${version} \e[0;1m┃${reset}"; WAIT

elif [[ ${shell} == *'dash'* ]];then
printf "\n\e[0;1m┃\e[1;7m Logged shell — ${sh3}                  ${arrow} -v ${version} \e[0;1m┃${reset}"; WAIT

elif [[ ${shell} == *'zsh'* ]];then
printf "\n\e[0;1m┃\e[1;7m Logged shell — ${sh4}                   ${arrow} -v ${version} \e[0;1m┃${reset}"; WAIT

elif [[ ${shell} == *'tcsh'* ]];then
printf "\n\e[0;1m┃\e[1;7m Logged shell — ${sh5}                  ${arrow} -v ${version} \e[0;1m┃${reset}"; WAIT

elif [[ ${shell} == *'fish'* ]];then
printf "\n\e[0;1m┃\e[1;7m Logged shell — ${sh6}                  ${arrow} -v ${version} \e[0;1m┃${reset}"; WAIT

else
printf "\n\e[0;1m┃\e[1;7m Logged shell — unknown                 ${arrow} -v ${version} \e[0;1m┃${reset}"; WAIT
fi
}

#..............................................................

## sound effect
play_alert() {
tput bel
play ${LOC11}/stdout.wav &> /dev/null &
}
play_error(){
tput bel
play ${LOC11}/error.wav &> /dev/null &
}

#..............................................................

## file names
N0="Theme-Engine" N1="theme-engine"
N2="colors"       N3="fonts"   N4="programs"
N5="Terminus.ttf" N6="fonts.rar"
N7="termux.properties"         N8="config.theme-engine"
N9="about.theme"  N10="disable.zsh.theme"
N11="unrar.theme" N12="zsh.setup.theme"
N13="highlight.features.theme" N14="error.page"

## directory names
D0="/usr/share" D1="share"
D2="programs"   D3=".termux"
D5="bin"
D6="src/assets/audio"
D7="src/assets/misc"
D9="/bin"

## directory
directoriesA() { PREFIX="/data/data/com.termux/files/usr"
PDIR="${PREFIX}/${D1}/${N0}" loc1="${PDIR}/${N2}"
loc2="${PDIR}/${N3}"         loc3="${PDIR}/${N4}"
loc4="${PDIR}/${N3}/${N5}"   loc5="${PDIR}/${N3}/${N6}"
loc6="${HOME}/${D3}/${N7}"   loc7="${HOME}/${D3}"
loc8="${HOME}/${D3}/${N8}"   loc9="${PDIR}"
loc10="${PDIR}/${N1}"        loc11="${PDIR}/${D6}"
loc12="${PDIR}/${D7}"        locA="${PREFIX}/${D5}/${N1}"
locB="${loc3}/${N9}"         locC="${loc3}/${N10}"
locD="${loc3}/${N11}"        locE="${loc3}/${N12}"
locF="${loc3}/${N13}"        locG="${loc3}/${N14}"
}

## install types
packageA() {
apt install ${1}
}

if [[ $distro == *'Android'* ]];then
directoriesA
package() {
packageA ${1}
}
else echo "Theme-Engine isn't supported you're system."
exit 0
fi

#..............................................................

default_themeA() {
sed -i "1,20 s/THEME='night'/THEME='default'/g" ${locA} ${locB} ${locC} ${locD} ${locE} ${locF}
}

default_themeB() {
sed -i "1,20 s/THEME='light'/THEME='default'/g" ${locA} ${locB} ${locC} ${locD} ${locE} ${locF}
}

night_themeA() {
sed -i "1,20 s/THEME='default'/THEME='night'/g" ${locA} ${locB} ${locC} ${locD} ${locE} ${locF}
}

night_themeB() {
sed -i "1,20 s/THEME='light'/THEME='night'/g" ${locA} ${locB} ${locC} ${locD} ${locE} ${locF}
}

light_themeA() {
sed -i "1,20 s/THEME='night'/THEME='light'/g" ${locA} ${locB} ${locC} ${locD} ${locE} ${locF}
}

light_themeB() {
sed -i "1,20 s/THEME='default'/THEME='light'/g" ${locA} ${locB} ${locC} ${locD} ${locE} ${locF}
}

#..............................................................

banner0() {
clear
echo "
┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
┃     ${Fred}╺┳╸╻ ╻┏━╸┏┳┓┏━╸   ${Fblue}┏━╸┏┓╻┏━╸╻┏┓╻┏━╸     ${reset}┃
┃     ${Fred} ┃ ┣━┫┣╸ ┃┃┃┣╸ ${reset}╺━╸${Fblue}┣╸ ┃┗┫┃╺┓┃┃┗┫┣╸      ${reset}┃
┃     ${Fred} ╹ ╹ ╹┗━╸╹ ╹┗━╸   ${Fblue}┗━╸╹ ╹┗━┛╹╹ ╹┗━╸     ${reset}┃
┣━━━━━━━━━━━━━━━⌠version ${version}⌡━━━━━━━━━━━━━━━━┫
┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛
"
}

setup() {
	banner0
	printf " Setting-up Theme-Engine...\n\n"
	printf " Coping files in $PREFIX/$D1 directory...\n\n"
	cd ..
	cp -rf Theme-Engine $PREFIX/share &> /dev/null
	ln -s $PREFIX/share/Theme-Engine/theme-engine $PREFIX/bin/theme-engine
if [[ -d "${loc9}" && -f "$PREFIX/bin/theme-engine" ]];then
	printf " Successfully Setup Theme-Engine.\n\n"
	printf " You can run this program by typing \e[92mtheme-engine${reset}\n\n"
	printf " Get Help: \e[92mtheme-engine${reset} --help\n\n"
	printf " Git Page: https://github.com/abhackerofficial/Theme-Engine\n"
	exit
else
	echo -e " ${reset}Required files was deleted !\n"
	echo -e " ${Fred}Setup failed theme-engine trying to Re-Install...${reset}" ;sleep 0.5 ;cd $HOME
	bash -c " $(curl -fsSL https://github.com/abhackerofficial/Theme-Engine/raw/master/programs/update.theme)"
fi
}

remove() {
if [[ -d "${loc9}" ]] | [[ -f "$PREFIX/bin/theme-engine" ]];then
	banner0
	printf " Uninstalling Theme-Engine...\n\n"
	printf " Remove files in $PREFIX/$D1 directory...\n\n"
	rm -rf ${loc9}
	rm $PREFIX/bin/theme-engine
	printf " Successfully Removed Theme-Engine.\n\n"
	printf " Git Page: https://github.com/abhackerofficial/Theme-Engine\n"
	exit
fi
}

#..............................................................

# Connection
connect() {
connection="$(ping -c 1 -q www.google.com >&/dev/null; echo $?)"
if [[ "$connection" != 0 ]]
   then clear
   bash "${loc3}/error.page"
   exit
 fi
}

## Required Packeges Checking...
   command -v wget > /dev/null 2>&1 || { echo >&2 "I require wget but it's not installed, Now Installing..."; package "wget -y"
 connect
}

   command -v unrar > /dev/null 2>&1 || { echo >&2 "I require unrar but it's not installed, Now Installing..."; package "unrar -y"
 connect
}

   command -v tput > /dev/null 2>&1 || { echo >&2 "I require ncurses-utils but it's not installed, Now Installing..."; package "ncurses-utils -y"
 connect
}

   command -v lsd > /dev/null 2>&1 || { echo >&2 "I require lsd but it's not installed, Now Installing..."; package "lsd -y"
 connect
}
   command -v sox > /dev/null 2>&1 || { echo >&2 "I require sox but it's not installed, Now Installing..."; package "sox -y"
 connect
}

   command -v zsh > /dev/null 2>&1 || { echo >&2 "I require zsh but it's not installed, Now Installing..."; package "zsh -y"
 connect
}

#..............................................................

checking() {
if [[ -d "${loc9}" && -f "$PREFIX/bin/theme-engine" ]];then
pwd &> /dev/null
else setup
fi
}

#..............................................................
                           checking
#..............................................................

## arguments

if [[ "${1}" = "-h" ]] || [[ "${1}" = "--help" ]]; then
echo -e "Usage: theme-engine [options...]

 available themes:
  --theme -default  : \e[1;90m━━\e[0;1m━━${reset}
  --theme -night    : \e[1;90m━━━━\e[0m${reset}
  --theme -light    : \e[0;1m━━━━\e[0m${reset}

 available commands:
  -c  : Start color-scheme menu with this command.
  -f  : Start font-style menu with this command.
  -t  : Start zsh-theme menu with this command.
  -U  : Check available update with this command.
  -L  : Check changelog with this command.

 --updater -off :  Trun off auto-updater with this command.
 --updater -on  :  Turn on auto-updater with this command.
 --uninstall    :  This command to uninstall Theme-Engine.
 
 minimal commands:
  -c [<num>] : Start minimal color-scheme pop-up menu with this command.
  -f [<num>] : Start minimal font-style pop-up menu with this command.
  -t [<num>] : ..,,.. ..,,.. zsh-theme .,,. .,,. .,,. (comming soon)."
exit

elif [ "${1}" = "-c" ]; then
	cd ${loc3}
  if [[ "${#2}" -gt 0 ]]
  then
	bash colors.theme -c ${2}
else
  bash colors.theme
  fi
	exit

elif [ "${1}" = "-f" ]; then
	cd ${loc3}
	if [[ "${#2}" -gt 0 ]]
  then
	bash fonts.theme -f ${2}
else
  bash fonts.theme
  fi
	exit

elif [ "${1}" = "-t" ]; then
  cd ${loc3}
  if [[ "${#2}" -gt 0 ]]
  then
	bash zsh.theme -t ${2}
else
  bash zsh.theme
  fi
  exit

elif [ "${1}" = "-U" ]; then
        cd ${loc3}
        bash update.theme --check
        exit

elif [ "${1}" = "-L" ]; then
	printf "\n${Fgreen}CHANGELOG >${reset}\n\n`cat ${loc9}/CHANGELOG.md`\n\n"
	if [ -f "${loc9}/log" ];then
	printf "${Fyellow}UPDATELOG >${reset}\n\n`cat ${loc9}/log`\n\n"
	fi
	exit

elif [ "${1}" = "--install" ]; then
	setup

elif [ "${1}" = "--configure" ]; then
if [ ! -f "${loc8}" ];then
theme-engine --install
sleep 0.5
clear
bash ${loc3}/configure.theme
sleep 0.5
bash "${PDIR}/$D2/zsh.setup.theme"
exit
else
echo "You have already created configuration !"
exit
fi

elif [ "${1}" = "--uninstall" ]; then
	remove

elif [ "${1}" = "--theme" ]; then
if [ ${#2} -lt 1 ]; then
	echo -e "theme-engine: try 'theme-engine --help' or 'theme-engine -h'\nfor more information"
	exit
	fi

if [[ "${2}" = "-default" ]] || [[ "${2}" = "-DEFAULT" ]]; then
	default_themeA
	default_themeB
	printf "enabled theme: default\n"
	exit

elif [[ "${2}" = "-night" ]] || [[ "${2}" = "-NIGHT" ]]; then
	night_themeA
	night_themeB
        printf "enabled theme: night\n"
	exit

elif [[ "${2}" = "-light" ]] || [[ "${2}" = "-LIGHT" ]]; then
	light_themeA
	light_themeB
        printf "enabled theme: light\n"
        exit
fi

elif [ "${1}" = "--updater" ]; then
	if [ ${#2} -lt 1 ]; then
	echo -e "theme-engine: try 'theme-engine --help' or 'theme-engine -h'\nfor more information"
	exit
	fi

if [[ "${2}" = "-off" ]] || [[ "${2}" = "-OFF" ]]; then
	sed -i "20,40 s/status='true'/status='false'/g" ${locA}
	printf "updater: off\n"
exit
elif [[ "${2}" = "-on" ]] || [[ "${2}" = "-ON" ]]; then
	sed -i "20,40 s/status='false'/status='true'/g" ${locA}
	printf "updater: on\n"
exit
fi

elif [[ $1 != $0 ]] | [[ ${#1} -lt 1 ]];then
pwd &> /dev/null

else
echo "theme-engine: no command specified! '$1'
Try 'theme-engine --help' for more information."
exit
fi

#..............................................................

PUT()  { echo -en "\033[${1};${2}H";}
HIDE() { echo -en "\033[?25l";}
NORM() { echo -en "\033[?12l\033[?25h";}
RCUSR() { echo -ne "\033]12;#b4e1fd\007";}
WAIT() { sleep 0.03 ;}

line1() { printf "\e[0;1m┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓\r" ;}
line2() { printf "\e[0;1m┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛\r" ;}
line3() { echo -e "\e[0;1m┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓" ;}
line4() { echo -e "\e[0;1m┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛" ;}
line5() { echo -e "\e[0;1m┣━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┫" ;}
ERROR() {
echo -e "\e[0;1m
┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
┃\e[1;100m             ✘ You entered Wrong Input !             \e[0;1m┃
┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛${reset}";RCUSR
}

#..............................................................

# interrupter
exit_on_signal_SIGINT () {
    echo -e "\n"
    RCUSR
    NORM
    exit 0
}

exit_on_signal_SIGTSTP () {
   echo -e "\n"
   RCUSR
   NORM
   exit 0
}

trap exit_on_signal_SIGINT SIGINT ; trap exit_on_signal_SIGTSTP SIGTSTP

#..............................................................

if [ -f "${loc5}" ];then
  if [ -f "${loc4}" ];then
     rm ${loc9}/fonts/fonts.rar ;fi ;fi

#..............................................................

## update files
update_files() {
cp -rf ${loc1} ${loc7}
cp -rf ${loc2} ${loc7}
}

#..............................................................

## Theme-Engine auto-update

night_updater() {
if [[ $status == 'true' ]] || [[ $status == 'TRUE' ]];then
cd ${loc9}
HIDE
	printf "\e[0;1m┃\e[0;1;100m    Checking for Update...                          \e[0;1m┃${reset}\r"
      PUT 15 1
   line2
changed=0
	git remote update &> /dev/null && git status -uno | grep -q 'Your branch is behind' && changed=1
	if [ $changed = 1 ]; then
  PUT 14 1
	printf "\e[0;1m┃\e[0;1;100m   ✚ Theme-Engine Update Available                   \r\e[0;1m┃${reset}"
      sleep 1.6
    PUT 15 1
  line2
PUT 14 1
	printf "\e[0;1m┃\e[0;1;100m   ✚ Theme-Engine Updating...                        \r\e[0;1m┃${reset}"
       PUT 15 1
     line2
    git stash &> /dev/null
  git pull &> log
 update_files
PUT 14 1

	printf "\e[0;1m┃\e[0;1;100m   ✔ Theme-Engine is Updated to latest version.      \r\e[0;1m┃${reset}"
      sleep 1.6
    PUT 15 1
  line2
PUT 14 1

	printf "\e[0;1m┃\e[0;1;100m   ➜ Get Changelog : theme-engine -L                 \r\e[0;1m┃${reset}"
      sleep 1.6
    PUT 15 1
   line2
 PUT 14 1
bash theme-engine
exit
else
      PUT 15 1
    line2
  PUT 14 1
NORM
fi
fi
}

day_updater() {
if [[ $status == 'true' ]] || [[ $status == 'TRUE' ]];then
cd ${loc9}
HIDE
	printf "\e[0;1m┃\e[0;1;7m    Checking for Update...                          \e[0;1m┃${reset}\r"
      PUT 15 1
   line2
changed=0
	git remote update &> /dev/null && git status -uno | grep -q 'Your branch is behind' && changed=1
	if [ $changed = 1 ]; then
  PUT 14 1
	printf "\e[0;1m┃\e[0;1;7m   ✚ Theme-Engine Update Available                   \r\e[0;1m┃${reset}"
      sleep 1.6
    PUT 15 1
  line2
PUT 14 1
	printf "\e[0;1m┃\e[0;1;7m   ✚ Theme-Engine Updating...                        \r\e[0;1m┃${reset}"
       PUT 15 1
     line2
    git stash &> /dev/null
  git pull &> log
 update_files
PUT 14 1

	printf "\e[0;1m┃\e[0;1;7m   ✔ Theme-Engine is Updated to latest version.      \r\e[0;1m┃${reset}"
      sleep 1.6
    PUT 15 1
  line2
PUT 14 1

	printf "\e[0;1m┃\e[0;1;7m   ➜ Get Changelog : theme-engine -L                 \r\e[0;1m┃${reset}"
      sleep 1.6
    PUT 15 1
   line2
 PUT 14 1
bash theme-engine
exit
else
      PUT 15 1
    line2
  PUT 14 1
NORM
fi
fi
}

#..............................................................

## Theme-Engine Main Options

night_options() {
   echo -e "\e[0;1m┃${NBred} ┌[1]┐ Apply Color Scheme ${NByellow} ┌[4]┐ Disable Zsh-Theme   \e[0;1m┃${reset}";WAIT

   echo -e "\e[0;1m┃${NBblue} │ 2 │ Apply Font Style   ${NBcyan} │ 5 │ Highlight Features  \e[0;1m┃";WAIT

if [ ! -f "${loc8}" ];then
   echo -e "\e[0;1m┃${NBpurple} └[3]┘ Enable Zsh-Theme   ${NBsky} └[6]┘ About Theme-Engine  \e[0;1m┃${reset}";WAIT
else
   echo -e "\e[0;1m┃${NBpurple} └[3]┘ Apply Zsh-Theme    ${NBsky} └[6]┘ About Theme-Engine  \e[0;1m┃${reset}";WAIT
fi
}

day_options() {
   echo -e "\e[0;1m┃\e[48;2;243;117;23m \e[49m\e[48;2;244;112;26m┌[\e[49m\e[48;2;246;108;28m\e[\e[49m\e[48;2;247;104;31m1\e[49m\e[48;2;249;100;34m]\e[49m\e[48;2;250;96;37m┐\e[49m\e[48;2;251;92;40m \e[49m\e[48;2;252;88;43mA\e[49m\e[48;2;253;84;46mp\e[49m\e[48;2;253;80;50mp\e[49m\e[48;2;254;76;53ml\e[49m\e[48;2;254;72;56my\e[49m\e[48;2;254;68;60m \e[49m\e[48;2;254;64;64mC\e[49m\e[48;2;254;61;67mo\e[49m\e[48;2;254;57;71ml\e[49m\e[48;2;254;54;75mo\e[49m\e[48;2;253;50;79mr\e[49m\e[48;2;253;47;83m \e[49m\e[48;2;252;44;87mS\e[49m\e[48;2;251;41;91mc\e[49m\e[48;2;250;38;95mh\e[49m\e[48;2;249;35;99me\e[49m\e[48;2;248;32;103mm\e[49m\e[48;2;246;29;107me\e[49m\e[48;2;245;26;111m \e[49m\e[48;2;243;24;116m\e[49m\e[90;48;2;149;225;8m \e[49m\e[48;2;153;223;7m┌[\e[49m\e[48;2;157;220;6m\e[\e[49m\e[48;2;161;217;5m4\e[49m\e[48;2;165;214;4m]\e[49m\e[48;2;169;211;3m┐\e[49m\e[48;2;173;207;2m \e[49m\e[48;2;177;204;1mD\e[49m\e[48;2;181;201;1mi\e[49m\e[48;2;185;197;1ms\e[49m\e[48;2;188;194;1ma\e[49m\e[48;2;192;190;1mb\e[49m\e[48;2;196;186;1ml\e[49m\e[48;2;199;182;1me\e[49m\e[48;2;203;179;1m \e[49m\e[48;2;206;175;2mZ\e[49m\e[48;2;209;171;2ms\e[49m\e[48;2;213;167;3mh\e[49m\e[48;2;216;163;4m-\e[49m\e[48;2;219;159;5mT\e[49m\e[48;2;222;154;7mh\e[49m\e[48;2;224;150;8me\e[49m\e[48;2;227;146;9mm\e[49m\e[48;2;230;142;11me\e[49m\e[48;2;232;138;13m \e[49m\e[48;2;234;133;15m \e[49m\e[48;2;237;129;17m \e[49m\e[48;2;239;125;19m\e[49m\e[0;1m┃${reset}";WAIT

   echo -e "\e[0;1m┃\e[48;2;66;62;254m \e[49m\e[48;2;62;66;254m│\e[49m\e[48;2;58;70;254m \e[49m\e[48;2;55;74;254m2\e[49m\e[48;2;51;77;254m \e[49m\e[48;2;48;81;253m│\e[49m\e[48;2;45;85;252m \e[49m\e[48;2;42;89;251mA\e[49m\e[48;2;39;93;250mp\e[49m\e[48;2;36;98;249mp\e[49m\e[48;2;33;102;248ml\e[49m\e[48;2;30;106;247my\e[49m\e[48;2;27;110;245m \e[49m\e[48;2;25;114;244mF\e[49m\e[48;2;22;118;242mo\e[49m\e[48;2;20;123;240mn\e[49m\e[48;2;18;127;238mt\e[49m\e[48;2;16;131;236m \e[49m\e[48;2;14;135;233mS\e[49m\e[48;2;12;140;231mt\e[49m\e[48;2;10;144;228my\e[49m\e[48;2;9;148;226ml\e[49m\e[48;2;7;152;223me\e[49m\e[48;2;6;156;220m \e[49m\e[48;2;5;160;217m \e[49m\e[48;2;4;164;214m \e[49m\e[48;2;3;168;211m\e[49m\e[90;48;2;16;236;130m \e[49m\e[48;2;18;238;126m│\e[49m\e[48;2;21;240;121m \e[49m\e[48;2;23;242;117m5\e[49m\e[48;2;25;244;113m \e[49m\e[48;2;28;246;109m│\e[49m\e[48;2;31;247;105m \e[49m\e[48;2;34;248;101mH\e[49m\e[48;2;36;250;96mi\e[49m\e[48;2;39;251;92mg\e[49m\e[48;2;43;252;88mh\e[49m\e[48;2;46;253;84ml\e[49m\e[48;2;49;253;80mi\e[49m\e[48;2;52;254;76mg\e[49m\e[48;2;56;254;73mh\e[49m\e[48;2;59;254;69mt\e[49m\e[48;2;63;254;65m \e[49m\e[48;2;67;254;61mF\e[49m\e[48;2;70;254;58me\e[49m\e[48;2;74;254;54ma\e[49m\e[48;2;78;254;51mt\e[49m\e[48;2;82;253;48mu\e[49m\e[48;2;86;252;44mr\e[49m\e[48;2;90;251;41me\e[49m\e[48;2;94;250;38ms\e[49m\e[48;2;98;249;35m \e[49m\e[48;2;102;248;32m \e[49m\e[48;2;106;246;30m\e[49m\e[0;1m┃";WAIT

if [ ! -f "${loc8}" ];then
   echo -e "\e[0;1m┃\e[48;2;118;23;242m \e[49m\e[48;2;114;25;244m└[\e[49m\e[48;2;110;28;245m\e[\e[49m\e[48;2;105;30;247m3\e[49m\e[48;2;101;33;248m]\e[49m\e[48;2;97;36;249m┘\e[49m\e[48;2;93;39;251m \e[49m\e[48;2;89;42;252mE\e[49m\e[48;2;85;45;252mn\e[49m\e[48;2;81;48;253ma\e[49m\e[48;2;77;52;254mb\e[49m\e[48;2;73;55;254ml\e[49m\e[48;2;69;59;254me\e[49m\e[48;2;66;62;254m \e[49m\e[48;2;62;66;254mZ\e[49m\e[48;2;58;70;254ms\e[49m\e[48;2;55;74;254mh\e[49m\e[48;2;51;77;254m-\e[49m\e[48;2;48;81;253mT\e[49m\e[48;2;45;85;252mh\e[49m\e[48;2;42;89;251me\e[49m\e[48;2;39;93;251mm\e[49m\e[48;2;36;97;249me\e[49m\e[48;2;33;102;248m \e[49m\e[48;2;30;106;247m \e[49m\e[48;2;27;110;245m \e[49m\e[48;2;25;114;244m\e[49m\e[90;48;2;5;158;219m${Bsky} └[6]┘ About Theme-Engine  \e[0;1m┃${reset}";WAIT
else
   echo -e "\e[0;1m┃\e[48;2;141;11;230m \e[49m\e[48;2;137;13;232m└[\e[49m\e[48;2;133;15;235m\e[\e[49m\e[48;2;129;17;237m3\e[49m\e[48;2;124;19;239m]\e[49m\e[48;2;120;21;241m┘\e[49m\e[48;2;116;24;243m \e[49m\e[48;2;112;26;245mA\e[49m\e[48;2;107;29;246mp\e[49m\e[48;2;103;32;248mp\e[49m\e[48;2;99;34;249ml\e[49m\e[48;2;95;37;250my\e[49m\e[48;2;91;40;251m \e[49m\e[48;2;87;44;252mZ\e[49m\e[48;2;83;47;253ms\e[49m\e[48;2;79;50;253mh\e[49m\e[48;2;75;54;254m-\e[49m\e[48;2;71;57;254mT\e[49m\e[48;2;68;61;254mh\e[49m\e[48;2;64;64;254me\e[49m\e[48;2;60;68;254mm\e[49m\e[48;2;57;72;254me\e[49m\e[48;2;53;76;254m \e[49m\e[48;2;50;79;253m \e[49m\e[48;2;46;83;253m \e[49m\e[48;2;43;87;252m \e[49m\e[48;2;40;91;251m\e[49m${Bsky} └[6]┘ About Theme-Engine  \e[0;1m┃${reset}";WAIT
fi
}

#..............................................................

## Theme-Engine Main Banner

night_banner() {
printf "${reset}"
echo -ne "\033]12;#363636\007";clear
printf "\n\e[0;1m┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓${reset}";WAIT
printf "\n\e[0;1m┃\e[0;1;100m ${NBred}                                                    \e[0;1m┃${reset}";WAIT
printf "\n\e[0;1m┃\e[0;1;100m ${NBred} ▀█▀ █ █ █▀▀ █▀▄▀█ █▀▀ \e[0;100m▃▃${NBblue}  █▀▀ █▄ █ █▀▀ █ █▄ █ █▀▀  \e[0;1m┃${reset}";WAIT
printf "\n\e[0;1m┃\e[0;1;100m ${NBred}  █  █▀█ ██▄ █ ▀ █ ██▄ ${NBred}  ${NBblue}  ██▄ █ ▀█ █▄█ █ █ ▀█ ██▄  \e[0;1m┃${reset}";WAIT
printf "\n\e[0;1m┃\e[0;1;100m ${NBred}                       ${NBred}  ${NBblue}                           \e[0;1m┃${reset}";WAIT
printf "\n\e[0;1m┃\e[0;1;100m Maintain by ── abhackerofficial ─────┐              \e[0;1m┃${reset}";WAIT
printf "`night_print_shell`"
printf "\n\e[0;1m┣━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┫${reset}\n";WAIT
}

day_banner() {
printf "${reset}"
echo -ne "\033]12;#363636\007";clear
printf "\n\e[0;1m┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓${reset}";WAIT
printf "\n\e[0;1m┃${Bred}                          ${Bblue}                           \e[0;1m┃${reset}";WAIT
printf "\n\e[0;1m┃${Bred} ${Sred} ▀█▀ █ █ █▀▀ █▀▄▀█ █▀▀ ${Sreset}▃▃${Bblue} ${Sblue} █▀▀ █▄ █ █▀▀ █ █▄ █ █▀▀  \e[0;1m┃${reset}";WAIT
printf "\n\e[0;1m┃${Bred} ${Sred}  █  █▀█ ██▄ █ ▀ █ ██▄   ${Bblue} ${Sblue} ██▄ █ ▀█ █▄█ █ █ ▀█ ██▄  \e[0;1m┃${reset}";WAIT
printf "\n\e[0;1m┃${Bred}                          ${Bblue}                           \e[0;1m┃${reset}";WAIT
printf "\n\e[0;1m┃\e[0;1;7m Maintain by ── abhackerofficial ─────┐              \e[0;1m┃${reset}";WAIT
printf "`day_print_shell`"
printf "\n\e[0;1m┣━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┫${reset}\n";WAIT
}

#..............................................................
#..............................................................

night() {
if [ -f "${loc5}" ];then
  if [ -f "${loc8}" ];then
          night_banner
line5
      night_options
    PUT 15 1
 line4
bash ${loc3}/unrar.theme
   fi
fi

if [ -f "${loc8}" ];then
     night_banner
line5
  night_options
night_updater

#..............................................................

RCUSR
printf "\e[0;1m┃\e[0;1;100m  [Execute an Option]>                               \e[0;1m┃${reset}"
	PUT 15 1
      line4
     PUT 14 25
    printf "\e[0;1;100m"
  read option
echo -ne "${reset}"

#..............................................................

if [[ $option = "1" ]] || [[ $option = "01" ]];then
	play_alert
	echo
	cd ${loc3}
	bash colors.theme

elif [[ $option = "2" ]] || [[ $option = "02" ]];then
	play_alert
	echo
	cd ${loc3}
	bash fonts.theme

elif [[ $option = "3" ]] || [[ $option = "03" ]];then
	play_alert
	RCUSR
	cd ${loc3}
	bash zsh.theme

elif [[ $option = "4" ]] || [[ $option = "04" ]];then
	play_alert
	RCUSR
        cd ${loc3}
        bash disable.zsh.theme
	exit

elif [[ $option = "5" ]] || [[ $option = "05" ]];then
	play_alert
	RCUSR
	cd ${loc3}
	bash highlight.features.theme

elif [[ $option = "6" ]] || [[ $option = "06" ]];then
	play_alert
	cd ${loc3}
	bash about.theme

else PUT 15 1
	play_error
	ERROR
   fi
fi

#..............................................................

if [ -f "${loc5}" ];then
 if [ ! -f "${loc8}" ];then
      night_banner
line5
   night_options
  PUT 15 1
 line4
bash ${loc3}/unrar.theme
   fi
fi

if [ ! -f "${loc8}" ];then
    night_banner
line5
  night_options
night_updater

#..............................................................

RCUSR
printf "\e[0;1m┃\e[0;1;100m  [Execute an Option]>                               \e[0;1m┃${reset}"
	PUT 15 1
      line4
     PUT 14 25
    printf "\e[0;1;100m"
  read option
echo -ne "${reset}"

#..............................................................

if [[ $option = "1" ]] || [[ $option = "01" ]];then
	play_alert
	echo
	cd ${loc3}
	bash colors.theme

elif [[ $option = "2" ]] || [[ $option = "02" ]];then
	play_alert
	echo
	cd ${loc3}
	bash fonts.theme

elif [[ $option = "3" ]] || [[ $option = "03" ]];then
	play_alert
	RCUSR
	cd ${loc3}
	bash zsh.setup.theme

elif [[ $option = "4" ]] || [[ $option = "04" ]];then
	play_alert
	RCUSR
        cd ${loc3}
        bash disable.zsh.theme
        exit

elif [[ $option = "5" ]] || [[ $option = "05" ]];then
	play_alert
	RCUSR
	cd ${loc3}
        bash highlight.features.theme

elif [[ $option = "6" ]] || [[ $option = "06" ]];then
	play_alert
	cd ${loc3}
	bash about.theme

else PUT 15 1
	play_error
	ERROR
   fi
fi
}

#..............................................................
#..............................................................

light() {
if [ -f "${loc5}" ];then
  if [ -f "${loc8}" ];then
          day_banner
        line5
      day_options
    PUT 15 1
 line4
bash ${loc3}/unrar.theme
   fi
fi

if [ -f "${loc8}" ];then
     day_banner
    line5
  day_options
day_updater

#..............................................................

printf "\e[0;1m┃\e[0;1;7m  [Execute an Option]>                               \e[0;1m┃${reset}"
	PUT 15 1
      line4
     PUT 14 25
    printf "\e[0;1;7m"
  read option
echo -ne "${reset}"

#..............................................................

if [[ $option = "1" ]] || [[ $option = "01" ]];then
	play_alert
	echo
	cd ${loc3}
	bash colors.theme

elif [[ $option = "2" ]] || [[ $option = "02" ]];then
	play_alert
	echo
	cd ${loc3}
	bash fonts.theme

elif [[ $option = "3" ]] || [[ $option = "03" ]];then
	play_alert
	RCUSR
	cd ${loc3}
	bash zsh.theme

elif [[ $option = "4" ]] || [[ $option = "04" ]];then
	play_alert
	RCUSR
        cd ${loc3}
        bash disable.zsh.theme
	exit

elif [[ $option = "5" ]] || [[ $option = "05" ]];then
	play_alert
	RCUSR
        cd ${loc3}
        bash highlight.features.theme

elif [[ $option = "6" ]] || [[ $option = "06" ]];then
	play_alert
	cd ${loc3}
	bash about.theme

else PUT 15 1
	play_error
	ERROR
   fi
fi

#..............................................................

if [ -f "${loc5}" ];then
 if [ ! -f "${loc8}" ];then
      day_banner
    line5
   day_options
  PUT 15 1
 line4
bash ${loc3}/unrar.theme
   fi
fi

if [ ! -f "${loc8}" ];then
    day_banner
   line5
  day_options
day_updater

#..............................................................

printf "\e[0;1m┃\e[0;1;7m  [Execute an Option]>                               \e[0;1m┃${reset}"
         PUT 15 1
       line4
      PUT 14 25
    printf "\e[0;1;7m"
  read option
echo -ne "${reset}"

#..............................................................

if [[ $option = "1" ]] || [[ $option = "01" ]];then
	play_alert
	echo
	cd ${loc3}
	bash colors.theme

elif [[ $option = "2" ]] || [[ $option = "02" ]];then
	play_alert
	echo
	cd ${loc3}
	bash fonts.theme

elif [[ $option = "3" ]] || [[ $option = "03" ]];then
	play_alert
	RCUSR
	cd ${loc3}
	bash zsh.setup.theme

elif [[ $option = "4" ]] || [[ $option = "04" ]];then
	play_alert
	RCUSR
        cd ${loc3}
        bash disable.zsh.theme
        exit

elif [[ $option = "5" ]] || [[ $option = "05" ]];then
	play_alert
	RCUSR
        cd ${loc3}
        bash highlight.features.theme

elif [[ $option = "6" ]] || [[ $option = "06" ]];then
	play_alert
	cd ${loc3}
	bash about.theme

else PUT 15 1
	play_error
	ERROR
   fi
fi
}

#..............................................................
#..............................................................

## Auto Theme

default() {
if [ $night -gt "17" ] || [ $night -lt "06" ];then
night
else
light
fi
}

#..............................................................

                          "$THEME"

#..............................................................

#       Thanks for using Theme-Engine.
